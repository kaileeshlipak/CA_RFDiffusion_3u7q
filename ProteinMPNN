#downloading protein mpnn and set up

git clone https://github.com/dauparas/ProteinMPNN.git cd ProteinMPNN 
conda create -n proteinmpnn python=3.8  
conda activate proteinmpnn  
conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia  
pip install biopython numpy 

#running MPNN to loop over all structures in a directory 

conda activate proteinmpnn
mkdir -p proteinmpnn_output

for pdb_file in /work/10391/kaileeshlipak/ls6/CA_RFDiffusion/designs_nifD0821/refined_0822/*.pdb; do
    echo "Processing: $pdb_file"
    python protein_mpnn_run.py \
        --pdb_path "$pdb_file" \
        --pdb_path_chains "A" \
        --out_folder ./proteinmpnn_output \
        --num_seq_per_target 10 \
        --sampling_temp 0.1 \
        --seed 37
done

#formatting the fasta sequences better
import os

def format_fasta_sequences(output_dir):
    for filename in os.listdir(output_dir):
        if filename.endswith('.fa') or filename.endswith('.fasta'):
            print(f"\n=== {filename} ===")
            with open(os.path.join(output_dir, filename), 'r') as f:
                content = f.read().strip()
                lines = content.split('\n')
                
               	for i in range(0, len(lines), 2):
                    if i+1 < len(lines):
                        header = lines[i]
                        sequence = lines[i+1]
                        print(f"{header}")
                        # Break sequence into 80-character lines for readability
                        for j in range(0, len(sequence), 80):
                            print(sequence[j:j+80])
                        print()  # Empty line between sequences
format_fasta_sequences('seqs')

#converting femoco to json format for AF3 input
import json

def pdb_to_json(pdb_file):
    atoms = []
    
    with open(pdb_file, 'r') as f:
        for line in f:
            if line.startswith('HETATM') or line.startswith('ATOM'):
                # Parse PDB line format
                element = line[76:78].strip() or line[12:16].strip()[0]  # Element symbol
                x = float(line[30:38])
                y = float(line[38:46]) 
                z = float(line[46:54])
                
               	atoms.append({
                    "element": element,
                    "x": x,
                    "y": y,
                    "z": z
                })
    # Create JSON structure
    ligand_json = {
        "atoms": atoms,
        "name": "FeMoco"
    } 
    # Save to file
    with open('femoco.json', 'w') as f:
        json.dump(ligand_json, f, indent=2)
    
    print(f"Converted {len(atoms)} atoms to JSON format")
    print("Saved as femoco.json")
pdb_to_json('FeMoco_only.pdb')

